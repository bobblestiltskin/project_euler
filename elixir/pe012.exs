# <p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>
# <p class="center">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>
# <p>Let us list the factors of the first seven triangle numbers:</p>
# <blockquote class="monospace"><b> 1</b>: 1<br /><b> 3</b>: 1,3<br /><b> 6</b>: 1,2,3,6<br /><b>10</b>: 1,2,5,10<br /><b>15</b>: 1,3,5,15<br /><b>21</b>: 1,3,7,21<br /><b>28</b>: 1,2,4,7,14,28</blockquote>
# <p>We can see that 28 is the first triangle number to have over five divisors.</p>
# <p>What is the value of the first triangle number to have over five hundred divisors?</p>

defmodule ProjectEuler do
  def pe012(n) do
    triangle_number(0, div(n, 2), 0, 1)
  end
   
  defp triangle_number(n, last, i, j) when n < last do
    root = Kernel.round :math.sqrt(i + j)
    triangle_number(get_number_of_divisors(i + j, root, 1, 0), last, i + j, j + 1)
  end

  defp triangle_number(_, _, i, _) do
    i
  end

  defp get_number_of_divisors(n, root, running, num_divisors) when running < root do
    if rem(n, running) == 0 do
      get_number_of_divisors(n, root, running + 1,  num_divisors + 1)
    else
      get_number_of_divisors(n, root, running + 1,  num_divisors)
    end
  end

  defp get_number_of_divisors(_, _, _, num_divisors) do
    num_divisors
  end
end

IO.puts(ProjectEuler.pe012(500))
