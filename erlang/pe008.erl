-module(pe008).
-export([start/0]).

maxv() -> 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450.

mine() -> 10000000000000.
mind() -> 1000000000000.
minc() -> 100000000000.
minb() -> 10000000000.
mina() -> 1000000000.
min9() -> 100000000.
min8() -> 10000000.
min7() -> 1000000.
min6() -> 100000.
min5() -> 10000.
min4() -> 1000.
min3() -> 100.
min2() -> 10.

start() ->
  pe008(0, maxv(), mine()).

pe008(Max, Num, Min) when (Num < Min) -> 
  io:format("~w~n", [Max]);

pe008(Max, Num, Min) -> 
  Candidate = one_prod(Num),
  Next = Num div 10,
  if
    Candidate > Max ->
      pe008(Candidate, Next, Min);
    true ->
      pe008(Max, Next, Min)
  end.

one_prod(Number) ->
  Numd   = Number rem mine(),
  Digitd = Numd div mind(),
  Numc   = Numd rem mind(),
  Digitc = Numc div minc(),
  Numb   = Numc rem minc(),
  Digitb = Numb div minb(),
  Numa   = Numb rem minb(),
  Digita = Numa div mina(),
  Num9   = Numa rem mina(),
  Digit9 = Num9 div min9(),
  Num8   = Num9 rem min9(),
  Digit8 = Num8 div min8(),
  Num7   = Num8 rem min8(),
  Digit7 = Num7 div min7(),
  Num6   = Num7 rem min7(),
  Digit6 = Num6 div min6(),
  Num5   = Num6 rem min6(),
  Digit5 = Num5 div min5(),
  Num4   = Num5 rem min5(),
  Digit4 = Num4 div min4(),
  Num3   = Num4 rem min4(),
  Digit3 = Num3 div min3(),
  Num2   = Num3 rem min3(),
  Digit2 = Num2 div min2(),
  Digit1 = Num2 rem min2(),
  Digitd * Digitc * Digitb * Digita * Digit9 * Digit8 * Digit7 * Digit6 * Digit5 * Digit4 * Digit3 * Digit2 * Digit1.
